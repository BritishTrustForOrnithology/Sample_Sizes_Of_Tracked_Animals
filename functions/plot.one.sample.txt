# ******************************************************************** #
# FUNCTION "plot.one.sample"
# Produces cumulative calculations for one bootstrap and plots across increasing no's of birds. 
# As well as computing the cumulative across birds (cumul == TRUE), we also 
# provide code to produce individual birds (cumul == FALSE)
# ******************************************************************** #
#cumul <- T; LISTNO <- 15 # manually testing

plot.one.sample <- function(LISTNO,cumul=TRUE){

	# FUNCTION: "get.splits": to get splits of the data and rbind in repeat data for same bird if in there twice, and rename it
	get.splits <- function(y){
		rr <- test[test$Bird == names(y),]
		ss <- do.call("rbind", replicate(y, rr, simplify = FALSE))
		ss <- ss[order(ss$Bird,ss$day,ss$Square),]

		if(y > 1){ # rename the ID of the bird if bird is repeated, to say bird.1 bird.2 etc
		   R <- 1; newnam2 <- newnam3 <- NULL	
		   for(R in 1:y){
			newnam <- rep(paste(names(y),R,sep="."),length(rr$Bird))
			newnam3 <- c(newnam2,newnam); newnam2 <- newnam3
		   }
		   ss$Bird <- newnam3
		}
	ss
	}

	# FUNCTION: "get.squares": to get the squares from the matrix (using the square ID) that meet the occupancy level criteria
	get.squares <- function(level){
		data2 <- data.frame(X = aa7[,length(aa2[1,])])
		data2$sq <- sq2; data2<- na.omit(data2)
		data2[data2<= level,]$sq
	}

	# Get dataframe subsets repeated for each bird picked, i.e. more than once per sample!
	test <- datasub[order(datasub$NewDay),]

	if(cumul == TRUE){
		tt <- table(ls[[LISTNO]]) # run through birds consecutively added to the sample
	}
	if(cumul == FALSE){
		tt <- table(ls3[[LISTNO]]) # run through individual birds in the 15 bird sample, so one bird only per plot in this case
	}

	tt2 <- split(tt,1:length(tt))

	test <- do.call("rbind",lapply(tt2,get.splits))	# so each bird is repeated x number of times in the given sample now
	test2 <- data.table(test)

	#### Cast table to get all birds with their zero data for all squares they used
	aa <- dcast.data.table(test2, Square ~ NewDay,fun= mean, fill = 0, value.var = "Dur.hrs")

	aa <- as.matrix(aa)
	sq <- aa[,1]
	aa <- aa[,-1] # remove the square column (but save for later plotting above)

	#aa <- t(t(aa)/apply(aa, 2, sum))	

	# need a workaround if there is ONLY one square - add in fake zero row
	if(!is.null(dim(aa))){
	  if(dim(aa)[1] == 1){
	  	aafake <- aa
	  	aafake <- rep(0,length(aa))
	  	aa <- as.matrix(rbind(aa,aafake))
	  }
	}
	if(is.null(dim(aa))){
	  	aafake <- aa
	  	aafake <- rep(0,length(aa))
	  	aa <- as.matrix(rbind(aa,aafake))
	}
	aa2 <- t(apply(aa, 1, cumsum))
	AA <- data.frame(dur.hrs = aa2[,length(aa2[1,])],sq=sq)	# square ID for plotting (before sorting!)
	AA <- AA[order(-AA$dur.hrs),]
	sq2 <- AA$sq # the re-ordered square list
	aa3 <- apply(aa2,2,sort,decreasing = TRUE)	# then sort by all columns in one go, order by Dur.hrs

	# then do cumsum over COLUMNS (for occupancy assessment) - each column here remember is a cumaltive day tally 1, 1-2, 1-3 etc - dataframe is stiall at the square level - dataframe is summed across birds at the start of the run 
	aa4 <- apply(aa3, 2, cumsum) 	# cumsum columns only 
	aa4[!aa3>0]<-0	# Add in zeros from aa3 because IT WILL then go over the zeros in aa3 so you DO need to reinsert zeros
	aa5 <- t(t(aa4)/apply(aa4, 2, max))	
	aa6 <- aa5
	aa6[!aa6>0]<-NA

	# Counting up
	aa7 <- aa6
	fin <- data.frame(X50 = colSums(aa7<=0.5,na.rm=TRUE)) #50% KDE
	fin$X75 <- colSums(aa7<=0.75,na.rm=TRUE)	#75% KDE
	fin$X90 <- colSums(aa7<=0.9,na.rm=TRUE)	#90% KDE
	fin$X95 <- colSums(aa7<=0.95,na.rm=TRUE) 	#95% KDE
	fin$X98 <- colSums(aa7<=0.98,na.rm=TRUE) 	#98% KDE
	fin$X100 <- colSums(aa7<=1,na.rm=TRUE) 	#100% KDE
	fin <- fin*4	# translate to actual area (2x2 grid cells)

	# plot test - for the chosen birds read in for the max day value in the sample - in this case 151 days 
	# save the output

	w.cm <- 10
	h.cm <- 10

	if(cumul == TRUE){
		plot.store.tiff <- "Plot.sample15birds151days.BBBbirdsadded.tiff"
		plot.store.tiff <- gsub("BBB",LISTNO,plot.store.tiff)
	}
	if(cumul == FALSE){
		plot.store.tiff <- "Plot.sample15birds151days.birdBBB.tiff"
		plot.store.tiff <- gsub("BBB",unique(ls[[15]])[LISTNO],plot.store.tiff)
	}

	tiff(plot.store.tiff, width=w.cm, height=h.cm, units="cm", pointsize=9, res=600, compression ="lzw") 
	
	plot(UKshp,col="lightgreen",xlim=c(540000,750000),ylim=c(200000,350000),xpd=TRUE,border="lightgreen",bty="l")
	plot(pol[pol@data$layer %in% get.squares(1),],add=TRUE,xpd=TRUE,col="yellow",border="yellow")
	plot(pol[pol@data$layer %in% get.squares(0.98),],add=TRUE,xpd=TRUE,col="orange",border="orange")
	plot(pol[pol@data$layer %in% get.squares(0.9),],add=TRUE,xpd=TRUE,col="red",border="red")
	plot(pol[pol@data$layer %in% get.squares(0.75),],add=TRUE,xpd=TRUE,col="darkred",border="darkred")

	if(length(get.squares(0.5)) > 0){
		plot(pol[pol@data$layer %in% get.squares(0.5),],add=TRUE,xpd=TRUE,col="blue",border="blue")
	}

	if(cumul == TRUE){
		mtext(paste(LISTNO,"birds added"),line=3)
	}
	if(cumul == FALSE){
		mtext(unique(ls[[15]])[LISTNO],line=3)
	}

	dev.off()

}

